#Installing tidyverse packages
install.packages("tidyverse")

#Loading tidyverse packages
library(tidyverse)

#Loading Lubridate Package to make it easier to work with time and date
library(lubridate)

#Loading here package to make it easy to reference files
install.packages("here")
library(here)

#Loading skimr package to make summarizing data easy
install.packages("skimr")
library(skimr)

#Loading janitor package for examining and cleaning data
install.packages("janitor")
library(janitor)


#Loading ggpubr package for the creation of beautiful visualization
install.packages("ggpubr")
library("ggpubr")


#Loading ggrepel package for repelling overlallping text in data viz
install.packages("ggrepel")
library("ggrepel")


#IT IS TIME TO IMPORT OUR DATA SETS
library(readxl)
dailyActivity_merged <- read_excel("dailyActivity_merged.xlsx")
dailyIntensities_merged <- read_excel("dailyIntensities_merged.xlsx")
dailySteps_merged <- read_excel("dailySteps_merged.xlsx")
print(dailyActivity_merged)

#Getting the Data sets summary
glimpse(dailyActivity_merged)
glimpse(dailyIntensities_merged)
glimpse(dailySteps_merged)

#CLEANING AND FORMATTING OF DATASETS
#Firstly, lets confirm the number of unique users in the dataframes
n_unique(dailyActivity_merged$Id)      #We discover 33 Unique IDs
n_unique(dailySteps_merged$Id)         #We discover 33 Unique IDs
n_unique(dailyIntensities_merged$Id)   #We discover 33 Unique IDs

#Secondly, lets look for duplicates in the datasets
sum(duplicated(dailyActivity_merged))  #We find no duplicates
sum(duplicated(dailySteps_merged))     #We find no duplicates
sum(duplicated(dailyIntensities_merged)) # We find no duplicates

#Thirdly, lets clean and rename the columns of the datasets
clean_names(dailyActivity_merged)
dailyActivity_merged<- rename_with(dailyActivity_merged, tolower)

clean_names(dailySteps_merged)
dailySteps_merged<- rename_with(dailySteps_merged, tolower)

clean_names(dailyIntensities_merged)
dailyIntensities_merged<- rename_with(dailyIntensities_merged, tolower)


#Fourthly, working on the consistency of date and time columns
view(dailyActivity_merged)
dailyActivity_merged <- dailyActivity_merged %>%
  rename(date = activitydate) %>%
  mutate(date = as_date(date, format = "%m/%d/%Y"))
view(dailyActivity_merged)

view(dailyIntensities_merged)
dailyIntensities_merged <- dailyIntensities_merged %>%
  rename(date = activityday) %>%
  mutate(date = as_date(date, format = "%m/%d/%Y"))


view(dailySteps_merged)
dailySteps_merged <- dailySteps_merged %>%
  rename(date = activityday) %>%
  mutate(date = as_date(date, format = "%m/%d/%Y"))

#Checking Our Clean DataSets
head(dailyActivity_merged)
head(dailyIntensities_merged)
head(dailySteps_merged)


#MERGING DATASETS
MergedDataSet <- merge(dailyActivity_merged, dailyIntensities_merged, by=c ("id", "date"))  #Merged DailyActivity and DailyIntensity
MergedDataSet2 <- merge(dailyActivity_merged, dailySteps_merged, by=c ("id", "date"))   #Merged DailyActivity and DailySteps
MergedDataSet3 <- merge(dailyIntensities_merged, dailySteps_merged, by=c ("id", "date"))   #Merged DailyIntensity and DailySteps

#ANALYSIS

view(MergedDataSet)
view(MergedDataSet2)
view(MergedDataSet3)

#Let us calculate daily steps average by user
daily_average <- MergedDataSet2 %>%
  group_by(id) %>%
  summarise (mean_daily_steps = mean(totalsteps), mean_daily_calories = mean(calories))

view (daily_average)


#Let us classify users based on daily average steps
#Referencing from https://www.10000steps.org.au/articles/healthy-lifestyles/counting-steps/
#Sedentary is less than 5,000 steps per day 
#Low active is 5,000 to 7,499 steps per day
#Somewhat active is 7,500 to 9,999 steps per day
#Active is more than 10,000 steps per day
#Highly active is more than 12,500 



user_type <- daily_average %>%
  mutate(user_type = case_when(
    mean_daily_steps < 5000 ~ "sedentary",
    mean_daily_steps >= 5000 & mean_daily_steps < 7499 ~ "lightly active", 
    mean_daily_steps >= 7500 & mean_daily_steps < 9999 ~ "fairly active", 
    mean_daily_steps >= 10000 ~ "very active"
  ))

view(user_type)


#Calculating the percentage of each user type
user_type_percent <- user_type %>%
  group_by(user_type) %>%
  summarise(total = n()) %>%
  mutate(totals = sum(total)) %>%
  group_by(user_type) %>%
  summarise(total_percent = total / totals) %>%
  mutate(labels = scales::percent(total_percent))

user_type_percent$user_type <- factor(user_type_percent$user_type , levels = c("very active", "fairly active", "lightly active", "sedentary"))

view(user_type_percent)


#VISUALIZATION
#Based on the number of steps taken every day, we can tell that users are well dispersed. Based on user activity, we may conclude that all types of users wear smart-devices.

user_type_percent %>%
  ggplot(aes(x="",y=total_percent, fill=user_type)) +
  geom_bar(stat = "identity", width = 1)+
  coord_polar("y", start=0)+
  theme_minimal()+
  theme(axis.title.x= element_blank(),
        axis.title.y = element_blank(),
        panel.border = element_blank(), 
        panel.grid = element_blank(), 
        axis.ticks = element_blank(),
        axis.text.x = element_blank(),
        plot.title = element_text(hjust = 0.5, size=14, face = "bold")) +
  scale_fill_manual(values = c("#00FFFF","#89CFF0", "#0000FF", "#F0FFFF")) +
  geom_text(aes(label = labels),
            position = position_stack(vjust = 0.5))+
  labs(title="User type distribution")


#DETERMINING WHEN USERS ARE MORE ACTIVE DURING THE DAY

hourlySteps_merged <- read_csv("hourlySteps_merged.csv") #Loading hourlySteps DataSet

#Split date from time in hourlySteps_merged
hourlySteps_merged <- hourlySteps_merged %>%
  separate(ActivityHour, into = c("date", "time"), sep= " ") %>%
  mutate(date = ymd(date))

#Visualizing Hourly steps through the day
hourlySteps_merged %>%
  group_by(time) %>%
  summarize(average_steps = mean(StepTotal)) %>%
  ggplot() +
  geom_col(mapping = aes(x=time, y = average_steps, fill = average_steps)) + 
  labs(title = "Hourly steps throughout the day", x="", y="") + 
  scale_fill_gradient(low = "#00FFFF", high = "#00008B")+
  theme(axis.text.x = element_text(angle = 90))
#From our visualizations, we can deduce that users are more active from 06:00HRS to 09:00HRS

#DETERMINING CORRELATIONS BETWEEN DAILY STEPS AND CALORIES
#Finding correlation between difffent variables
ggplot(dailyActivity_merged, aes(x=totalsteps, y=calories))+
  geom_jitter() +
  geom_smooth(color = "#FFD700") + 
  labs(title = "Daily Steps vs Calories", x = "Daily Steps", y= "Calories") +
  theme(panel.background = element_blank(),
        plot.title = element_text( size=14))
#Since the trend line goes up, there is correlation between daily steps and calories burned


